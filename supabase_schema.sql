-- Create the 'lists' table to store user-created watchlists.
CREATE TABLE
  public.lists (
    id uuid NOT NULL DEFAULT gen_random_uuid (),
    user_id uuid NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    is_deletable boolean NOT NULL DEFAULT true,
    CONSTRAINT lists_pkey PRIMARY KEY (id),
    CONSTRAINT lists_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT lists_user_id_name_key UNIQUE (user_id, name)
  );

-- Set up Row Level Security (RLS) for the 'lists' table.
ALTER TABLE public.lists ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable all access for users based on user_id" ON public.lists FOR ALL USING (auth.uid () = user_id) WITH CHECK (auth.uid () = user_id);

-- Create the 'list_items' table to store the movies and TV shows in each list.
CREATE TABLE
  public.list_items (
    id bigint generated by default as identity,
    list_id uuid NOT NULL,
    user_id uuid NOT NULL,
    media_id integer NOT NULL,
    media_type text NOT NULL,
    title text NOT NULL,
    poster_path text NULL,
    release_date text NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT list_items_pkey PRIMARY KEY (id),
    CONSTRAINT list_items_list_id_fkey FOREIGN KEY (list_id) REFERENCES public.lists (id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT list_items_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT list_items_unique_item UNIQUE (list_id, user_id, media_id, media_type)
  );

-- Set up RLS for the 'list_items' table.
ALTER TABLE public.list_items ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable all access for users based on user_id" ON public.list_items FOR ALL USING (auth.uid () = user_id) WITH CHECK (auth.uid () = user_id);


-- Create the 'torrent_sites' table for user-customized search sites.
CREATE TABLE public.torrent_sites (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    name character varying NOT NULL,
    url_template character varying NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT torrent_sites_pkey PRIMARY KEY (id),
    CONSTRAINT torrent_sites_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
);

-- Set up RLS for the 'torrent_sites' table.
ALTER TABLE public.torrent_sites ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable all access for users based on user_id" ON public.torrent_sites FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);


-- Create the 'torrent_keywords' table for user-customized search keywords.
CREATE TABLE public.torrent_keywords (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    value text NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT torrent_keywords_pkey PRIMARY KEY (id),
    CONSTRAINT torrent_keywords_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE,
    CONSTRAINT torrent_keywords_user_id_value_key UNIQUE (user_id, value)
);

-- Set up RLS for the 'torrent_keywords' table.
ALTER TABLE public.torrent_keywords ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable all access for users based on user_id" ON public.torrent_keywords FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
